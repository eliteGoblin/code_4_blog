<source>
  @type tail
  format none
  path /var/log/etcd*.log
  pos_file /var/log/etcd.log.pos
  tag kube.etcd.*
  read_from_head true
</source>

<source>
  @type tail
  format kubernetes
  path /var/log/kube-apiserver.log
  pos_file /var/log/kube-apiserver.log.pos
  tag kube.apiserver.*
  read_from_head true
</source>

<source>
  @type tail
  format kubernetes
  path /var/log/kube-controller-manager.log
  pos_file /var/log/kube-controller-manager.log.pos
  tag kube.controller-manager.*
  read_from_head true
</source>

<source>
  @type tail
  format kubernetes
  path /var/log/kube-proxy.log
  pos_file /var/log/kube-proxy.log.pos
  tag kube-proxy.*
  read_from_head true
</source>

<source>
  @type tail
  format kubernetes
  path /var/log/kube-scheduler.log
  pos_file /var/log/kube-scheduler.log.pos
  tag kube.scheduler.*
  read_from_head true 
</source>

<source>
  @type tail
  format kubernetes
  multiline_flush_interval 5s
  path /var/log/kubelet.log
  pos_file /var/log/fluentd-kubelet.log.pos
  tag kubelet
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  exclude_path ["/var/log/containers/*app-container*.log", "/var/log/containers/fluentd*.log"]
  pos_file /var/log/kubernetes-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag containers.*
  format json
  read_from_head true
</source>

<source>
  @type tail
  path /var/log/containers/*app-container*.log
  pos_file /var/log/apps.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag apps.*
  format json
  read_from_head true
</source>

<source>
 @type tail
 format syslog
 path ["/var/log/syslog", "/var/log/cloud-init*.log"]
 pos_file /var/log/other.log.pos
 tag other.*
 read_from_head true
</source>

<filter **>
  @type kubernetes_metadata
</filter>

<filter containers.**>
  @type record_transformer
  enable_ruby true
  <record>
    container-name ${record["kubernetes"]["container_name"]}
    container-id ${record["docker"]["container_id"]}
    pod-name ${record["kubernetes"]["pod_name"]}
    pod-id ${record["kubernetes"]["pod_id"]}
    host ${record["kubernetes"]["host"]}
    facility ${record["kubernetes"]["namespace_name"]}
    short_message ${record["log"]}

    version "1.1"
    cluster "#{ENV['CLUSTER']}"
  </record>
  remove_keys kubernetes,stream,docker,log
</filter>

<filter apps.**>
  @type record_transformer
  enable_ruby true
  <record>
    container-name ${record["kubernetes"]["container_name"]}
    container-id ${record["docker"]["container_id"]}
    pod-name ${record["kubernetes"]["pod_name"]}
    pod-id ${record["kubernetes"]["pod_id"]}
    service ${record["kubernetes"]["pod_name"].sub(/app-.*$/, '')}
    facility ${record["kubernetes"]["namespace_name"]}

    # gelf required field
    host ${record["kubernetes"]["host"]}
    level ${record["severity"]}
    short_message ${record["message"]}
    timestamp ${record["time"]}
    version "1.1"

    # new field
    cluster "#{ENV['CLUSTER']}"
  </record>
  remove_keys kubernetes,docker,stream,severity,message,time,log
</filter>

<match fluent.**>
  @type null
</match>

<match **>
  @type copy
  <store>
    @type gelf
    host "#{ENV['LEGACY_LOG_HOST']}"
    port "#{ENV['LEGACY_PORT']}"
    protocol "udp"
    flush_interval 5s
  </store>
  <store>
    @type gelf
    host "#{ENV['LOG_HOST']}"
    port "#{ENV['PORT']}"
    protocol "#{ENV['PROTOCOL']}"
    flush_interval 5s
  </store>
</match>
